// Code generated by MockGen. DO NOT EDIT.
// Source: ./module.go
//
// Generated by this command:
//
//	mockgen -source ./module.go -destination=./mocks/module.go -package=mock_module
//

// Package mock_module is a generated GoMock package.
package mock_module

import (
	reflect "reflect"
	models "route/internal/app/models"

	gomock "go.uber.org/mock/gomock"
)

// MockModule is a mock of mod interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// AcceptOrder mocks base method.
func (m *MockModule) AcceptOrder(order *models.Order, packagingType models.PackageType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptOrder", order, packagingType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptOrder indicates an expected call of AcceptOrder.
func (mr *MockModuleMockRecorder) AcceptOrder(order, packagingType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptOrder", reflect.TypeOf((*MockModule)(nil).AcceptOrder), order, packagingType)
}

// AcceptReturn mocks base method.
func (m *MockModule) AcceptReturn(orderID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptReturn", orderID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptReturn indicates an expected call of AcceptReturn.
func (mr *MockModuleMockRecorder) AcceptReturn(orderID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptReturn", reflect.TypeOf((*MockModule)(nil).AcceptReturn), orderID, userID)
}

// IssueOrder mocks base method.
func (m *MockModule) IssueOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssueOrder indicates an expected call of IssueOrder.
func (mr *MockModuleMockRecorder) IssueOrder(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueOrder", reflect.TypeOf((*MockModule)(nil).IssueOrder), orderID)
}

// ListOrders mocks base method.
func (m *MockModule) ListOrders(userID, lastN int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", userID, lastN)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockModuleMockRecorder) ListOrders(userID, lastN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockModule)(nil).ListOrders), userID, lastN)
}

// ListReturns mocks base method.
func (m *MockModule) ListReturns(page, pageSize int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReturns", page, pageSize)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReturns indicates an expected call of ListReturns.
func (mr *MockModuleMockRecorder) ListReturns(page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReturns", reflect.TypeOf((*MockModule)(nil).ListReturns), page, pageSize)
}

// ReturnOrder mocks base method.
func (m *MockModule) ReturnOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockModuleMockRecorder) ReturnOrder(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockModule)(nil).ReturnOrder), orderID)
}
